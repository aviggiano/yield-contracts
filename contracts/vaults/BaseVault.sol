//SPDX-License-Identifier: UNLICENSED
pragma solidity >=0.8.6;

import "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol";
import "../interfaces/IVault.sol";
import "../libs/TransferUtils.sol";
import "../libs/FixedPointMath.sol";

contract BaseVault is IVault {
    using TransferUtils for IERC20Metadata;
    using FixedPointMath for uint256;

    IERC20Metadata public immutable underlying;

    address strategist;

    uint256 currentRoundId;
    mapping(address => uint256) userRounds;

    mapping(address => uint256) userShares;
    uint256 totalShares;

    mapping(address => uint256) userLockedShares;
    uint256 totalLockedShares;

    mapping(address => uint256) withdrawRequest;
    bool withdrawWindowOpen;

    constructor(address _underlying, address _strategist) {
        underlying = IERC20Metadata(_underlying);
        strategist = _strategist;
    }

    /** Depositor **/

    /**
     * @dev See {IVault-deposit}.
     */
    function deposit(uint256 amount) public virtual override {
        uint256 shareAmount = previewShares(amount);

        underlying.safeTransferFrom(msg.sender, address(this), amount);

        _unlockPreviousShares(msg.sender);
        _mintLockedShares(msg.sender, shareAmount);

        emit Deposit(msg.sender, shareAmount, amount);
    }

    function requestWithdraw(address owner) external {
        withdrawRequest[owner] = currentRoundId;
        emit WithdrawRequest(owner, currentRoundId);
    }

    /**
     * @dev See {IVault-withdraw}.
     */
    function withdraw() public virtual override {
        address owner = msg.sender;
        if (!withdrawWindowOpen) revert NotInWithdrawWindow();
        if (withdrawRequest[owner] != currentRoundId - 1) revert WithdrawNotAllowed();

        _unlockPreviousShares(owner);

        (uint256 shareAmount,) = sharesOf(owner);
        uint256 claimableUnderlying = _burnShares(owner, shareAmount);
        underlying.transfer(owner, claimableUnderlying);

        emit Withdraw(owner, shareAmount, claimableUnderlying);
    }

    /**
     * @dev See {IVault-name}.
     */
    function name() external virtual override pure returns(string memory) {
        return "Base Vault";
    }

    /**
     * @dev Outputs the amount of shares and the locked shares for a given `owner` address.
     */
    function sharesOf(address owner) public virtual view returns (uint256 unlocked, uint256 locked) {
        locked = userLockedShares[owner];

        if (userRounds[owner] < currentRoundId) {
            locked = 0;
        }

        unlocked = userShares[owner] - locked;
    }

    /**
     * @dev Outputs the amount of shares that would be generated by depositing `underlyingAmount`.
     */
    function previewShares(uint256 underlyingAmount) public virtual view returns (uint256) {
        uint256 shareAmount = underlyingAmount;

        if (totalShares > 0) {
            shareAmount = underlyingAmount.mulDivUp(totalShares, _totalBalance());
        }

        return shareAmount;
    }

    /**
     * @dev Outputs the amount of underlying that would be claimed by the `owner` address.
     */
    function previewClaim(address owner) public virtual view returns (uint256) {
        return userShares[owner].mulDivDown(_totalBalance(), totalShares);
    }

    /** Strategist **/

    modifier onlyStrategist() {
        if (msg.sender != strategist) revert CallerIsNotTheStrategist();
        _;
    }

    function prepareRound() public virtual onlyStrategist {
        withdrawWindowOpen = false;

        uint256 balance = underlying.balanceOf(address(this));
        underlying.safeTransfer(strategist, balance);

        emit PrepareRound(currentRoundId, balance);
    }

    function closeRound(uint256 amountYielded) public virtual onlyStrategist {
        underlying.safeTransferFrom(msg.sender, address(this), amountYielded);
        withdrawWindowOpen = true;

        emit CloseRound(currentRoundId++, amountYielded);
    }

    /** Internals **/

    /**
     * @dev Calculate the total amount of assets under management.
     */
    function _totalBalance() internal virtual view returns(uint) {
        return underlying.balanceOf(strategist) + underlying.balanceOf(address(this));
    }

    /**
     * @dev Mint new shares, and locks them until they the next round.
     * @param owner Address owner of the shares
     * @param shareAmount Amount of shares to lock
     */
    function _mintLockedShares(address owner, uint256 shareAmount) internal virtual {
        userShares[owner] += shareAmount;
        totalShares += shareAmount;

        userLockedShares[owner] += shareAmount;
        totalLockedShares += shareAmount;
    }

    /**
     * @dev Burn shares.
     * @param owner Address owner of the shares
     * @param shareAmount Amount of shares to lock
     */
    function _burnShares(address owner, uint256 shareAmount) internal virtual returns(uint claimableUnderlying) {
        if (shareAmount > userShares[owner]) revert CallerHasNotEnoughShares();
        claimableUnderlying = previewClaim(owner);
        userShares[owner] -= shareAmount;
        totalShares -= shareAmount;
    }

    /**
     * @dev If owner has previous locked shares, unlocks them.
     * @param owner Address owner of the shares
     */
    function _unlockPreviousShares(address owner) internal virtual {
        if (userRounds[owner] < currentRoundId) {
            totalLockedShares -= userLockedShares[owner];
            userLockedShares[owner] = 0;
            userRounds[owner] = currentRoundId;
        }
    }
}
